
#+STARTUP: overview num
#+PROPERTY: header-args:emacs-lisp :tangle init.el


* Utilizez
** Comenzi pentru titlu
overview content 

** Generez manual
pentru a genera manual utilizez
 - CTRL-c si CTRL-v-t


* Config emacs-from-scratch

** Setari generale

*** Info la inceput

#+BEGIN_SRC emacs-lisp
  ;;; package -- init -*- lexical-binding: t; -*-

  ;;; Commentary:
  ;;; fisier autoconfigurat din Emacs.org
  ;;; nu il redactam aici

  ;;; Code:

#+END_SRC


*** Initializez

#+begin_src emacs-lisp
  ;; initializez
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)

  ;; Initialize use-package

  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src


*** Setez variable

#+begin_src emacs-lisp
    ;; setez variable generale
    (global-display-line-numbers-mode 1)
    (menu-bar-mode -1)
    (tab-bar-mode 1)
    (setq org-hide-emphasis-markers t)
    ;; da-nu in y-n
    (fset 'yes-or-no-p 'y-or-n-p)
    ;; autocomplete in bufer
    ;; (ido-mode)
    (indent-tabs-mode t)
    (setq redisplay-dont-pause t)
    (column-number-mode 1)
    ;; disable backup
    ;; (setq make-backup-files         nil) 
    ;; (setq auto-save-list-file-name  nil) 
    ;; (setq auto-save-default         nil)

#+end_src


*** Deconectez numerile in ORG si Shell
#+begin_src emacs-lisp
;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                eshell-mode-hook
	        shell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src


*** Setez Interfata la general
#+begin_src emacs-lisp
  (custom-set-faces
   '(font-lock-comment-face
     ((t (:foreground "#8b6508"))))
   '(mode-line
     ((t (:background "#5c5cff" :foreground "#000000"))))
   '(tab-bar
     ((t (:background "#5c5cff" :foreground "#e5e5e5"))))
   '(tab-bar-tab
     ((t (:background "#00cdcd"))))
   '(tab-bar-tab-inactive
     ((t (:background "#5c5cff"))))
   )
#+end_src


*** Includ modulul recentf

Acest modul ajuta sa deschizi mai rapid fisierele
ce au fost deschise ultima data

Combinatia CTRL-g si CTRL-g va deschide o lista
cu ultime fisiere lucrate

#+begin_src emacs-lisp
  ;; activez regimul recentf
  (recentf-mode 1)
  ;; (global-set-key (kbd "C-x C-g") 'recentf-open-files)
#+end_src


** Key Binding

*** General.el

M-x check-parents

#+begin_src emacs-lisp
  (use-package general)

  (general-auto-unbind-keys)

  ;; adaog la combinatie si space
  (general-create-definer Key-Space
    :states 'normal
    :prefix "SPC")

  ;; leg tastele
  (Key-Space
   "f" 'counsel-find-file
   "s" 'save-buffer
   "x" 'save-buffers-kill-terminal
   "r" 'recentf-open-files
   "e" 'org-babel-tangle
   "b" 'treemacs)

;;  (evil-collection-define-key 'normal 'treemacs-mode-map 
;;	"q" 'treemacs)

  ;; recentf keybinding
  ;; (general-define-key
  ;;  "C-x C-g" 'recentf-open-files)

#+end_src


*** Evil

#+begin_src emacs-lisp
  ;; Setez combinatii de taste ca in VIM
  (use-package undo-fu)

  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))

  (use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src


*** hidra

#+begin_src emacs-lisp
    (use-package hydra)
    (defhydra text-zoom()
    "zoom"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))
    (Key-Space
  "zs" '(text-zoom :which-key "zoom"))
#+end_src


** Setez modul ORG

*** Dechid adresa web in browser

#+begin_src emacs-lisp
;; deschide adresa in browser
(setq browse-url-browser-function 'browse-url-xdg-open)
#+end_src


*** Setez snipet pentru #+SRC

pentru a introduce proietatile de cod apas:
'<el' si TAB

#+begin_src emacs-lisp
(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
#+end_src


*** Generez automat init.el

In fisier introduc limbajul si fisierul care trebuie generat
sau in fiecare block - :tangle init.el
la salvarea fisierului se va genera automat init.el

PROPERTY: header-args:emacs-lisp :tangle init.el


#+begin_src emacs-lisp :tangle no
;; Automatically tangle our Emacs.org config file when we save it
(defun efs/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.emacs.d/Emacs.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src


*** Setez pachetul org-roam

#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/RoamNotes")
  (org-roam-completion-everywhere t)
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         :map org-mode-map
         ("C-M-i"    . completion-at-point))
  :config
  (org-roam-setup))
#+end_src

** Navigare

*** Setez ivy si counsel 

**** Explicarea

- Ivy ofera completare automata mai ales in
buferul de jos
- Counsel extinde comenzile ivy si mai adauga
- Swiper are functie de cautare rapida

  Github:
  [[https://github.com/abo-abo/swiper][abo-abo/swiper]]

  Documentatie:
  [[https://oremacs.com/swiper/][swiper]]

  
**** Setez Codul

#+begin_src emacs-lisp
  ;; Install counsel and ivy

  (use-package smex)

  (use-package counsel
    :config
    (counsel-mode 1))

  (use-package swiper)

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper-isearch)
	   ("M-x" . counsel-M-x)
	   ("C-x C-f" . counsel-find-file)
	   ("C-x b" . ivy-switch-buffer)
	   ("C-c C-r" . ivy-resume)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)	
	   :map ivy-switch-buffer-map
	   ("TAB" . ivy-done))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    (setq ivy-height 20))
#+end_src


*** Treemacs

**** Explicare
treemacs reaza o bara de navigare rapida


**** Instalare
#+begin_src emacs-lisp
  (use-package treemacs
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
	    treemacs-deferred-git-apply-delay        0.5
	    treemacs-directory-name-transformer      #'identity
	    treemacs-display-in-side-window          t
	    treemacs-eldoc-display                   'simple
	    treemacs-file-event-delay                2000
	    treemacs-file-extension-regex            treemacs-last-period-regex-value
	    treemacs-file-follow-delay               0.2
	    treemacs-file-name-transformer           #'identity
	    treemacs-follow-after-init               t
	    treemacs-expand-after-init               t
	    treemacs-find-workspace-method           'find-for-file-or-pick-first
	    treemacs-git-command-pipe                ""
	    treemacs-goto-tag-strategy               'refetch-index
	    treemacs-header-scroll-indicators        '(nil . "^^^^^^")
	    treemacs-hide-dot-git-directory          t
	    treemacs-indentation                     2
	    treemacs-indentation-string              " "
	    treemacs-is-never-other-window           nil
	    treemacs-max-git-entries                 5000
	    treemacs-missing-project-action          'ask
	    treemacs-move-forward-on-expand          nil
	    treemacs-no-png-images                   nil
	    treemacs-no-delete-other-windows         t
	    treemacs-project-follow-cleanup          nil
	    treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	    treemacs-position                        'left
	    treemacs-read-string-input               'from-child-frame
	    treemacs-recenter-distance               0.1
	    treemacs-recenter-after-file-follow      nil
	    treemacs-recenter-after-tag-follow       nil
	    treemacs-recenter-after-project-jump     'always
	    treemacs-recenter-after-project-expand   'on-distance
	    treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
	    treemacs-project-follow-into-home        nil
	    treemacs-show-cursor                     nil
	    treemacs-show-hidden-files               t
	    treemacs-silent-filewatch                nil
	    treemacs-silent-refresh                  nil
	    treemacs-sorting                         'alphabetic-asc
	    treemacs-select-when-already-in-treemacs 'move-back
	    treemacs-space-between-root-nodes        t
	    treemacs-tag-follow-cleanup              t
	    treemacs-tag-follow-delay                1.5
	    treemacs-text-scale                      nil
	    treemacs-user-mode-line-format           nil
	    treemacs-user-header-line-format         nil
	    treemacs-wide-toggle-width               70
	    treemacs-width                           35
	    treemacs-width-increment                 1
	    treemacs-width-is-initially-locked       t
	    treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
	(treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
		   (not (null treemacs-python-executable)))
	(`(t . t)
	 (treemacs-git-mode 'deferred))
	(`(t . _)
	 (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))


     (evil-collection-define-key 'normal 'treemacs-mode-map 
	"q" 'treemacs)

    :bind
    (:map global-map
	  ("M-0"       . treemacs-select-window)
	  ("C-x t 1"   . treemacs-delete-other-windows)
	  ("C-x t t"   . treemacs)
	  ("C-x t d"   . treemacs-select-directory)
	  ("C-x t B"   . treemacs-bookmark)
	  ("C-x t C-t" . treemacs-find-file)
	  ("C-x t M-t" . treemacs-find-tag)))


  (use-package treemacs-projectile
    :after (treemacs projectile))

  (use-package treemacs-magit
    :after (treemacs magit))

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :config (treemacs-set-scope-type 'Tabs))

  (use-package treemacs-evil
    :after (treemacs evil))

#+end_src


*** Projectile

**** Descriere

projectile ajuta la manupulatea proiectelor


**** Instalare

#+begin_src emacs-lisp
  ;; instalez proietile
  (use-package projectile
    :init
    (projectile-mode +1)
    (when
	(file-directory-p "~/programare")
      (setq projectile-project-search-path '("~/programare")))
    (setq projectile-switch-project-action #'projectile-dired)

    :bind (:map projectile-mode-map
		("C-c p" . projectile-command-map)))

  (use-package counsel-projectile
    :after projectile
    :config
    (counsel-projectile-mode 1))

#+end_src


*** Magit

instalare

#+begin_src emacs-lisp

  ;; Magit 
  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; (use-package evil-magit :after magit)

#+end_src

setez culoarea

#+begin_src emacs-lisp
  
  ;; culorile pentru magit
  (custom-set-faces
   '(magit-diff-context-highlight ((t (:extend t :background "brightblack" :foreground "white"))))
   '(magit-section-highlight ((t (:extend t :background "brightblack")))))

#+end_src


*** Dired

#+begin_src emacs-lisp

    ;; set hide details
    (use-package dired
      :ensure nil
      :custom
      ((dired-listing-switches "-agho --group-directories-first"))
      :hook
      (dired-mode . dired-hide-details-mode))

    ;; hide dotfiles
    (use-package dired-hide-dotfiles
      :hook
      (dired-mode . dired-hide-dotfiles-mode))

    ;; togle directory
    (use-package dired-subtree
      :after dired
      :config
      (evil-collection-define-key 'normal 'dired-mode-map 
	(kbd "TAB") 'dired-subtree-toggle))

#+end_src


** # ivy-rich (descrierea comenzilor ivy)

*** Codul

#+begin_src emacs-lisp :tangle no
  ;; setez ivy-rich
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1)
    :config
    (setcdr
     (assq t ivy-format-functions-alist) #'ivy-format-function-line))

#+end_src


** Setez helpful

*** Explicarea
Pachetul Helpful ofera documentatie mai comoda


*** Setarile

#+begin_src emacs-lisp
;; Instlez helpful 

(use-package helpful)

;; Note that the built-in `describe-function' includes both functions
;; and macros. `helpful-function' is functions only, so we provide
;; `helpful-callable' as a drop-in replacement.
(global-set-key (kbd "C-h f") #'helpful-callable)

(global-set-key (kbd "C-h v") #'helpful-variable)
(global-set-key (kbd "C-h k") #'helpful-key)
(global-set-key (kbd "C-h x") #'helpful-command)



;; Lookup the current symbol at point. C-c C-d is a common keybinding
;; for this in lisp modes.
(global-set-key (kbd "C-c C-d") #'helpful-at-point)

;; Look up *F*unctions (excludes macros).
;;
;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
;; already links to the manual, if a function is referenced there.
(global-set-key (kbd "C-h F") #'helpful-function)


(setq counsel-describe-function-function #'helpful-callable)
(setq counsel-describe-variable-function #'helpful-variable)


#+end_src



** Setez LSP

*** Info

LSP ofera multe beneficii in lucru
cu codul:

- completare automata
- cautare definirei functiei
- formatarea codului

  
*** Codul

#+begin_src emacs-lisp

    ;;; activez lsp
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook
    ((typescript-mode . lsp)
     (js2-mode . lsp)
     (html-mode . lsp)
     (java-mode . lsp)
     (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

    ;;; Activez verificarea flycheck
  (use-package flycheck
    :init (global-flycheck-mode))

  ;; dezactivez checkdoc warnings
  (with-eval-after-load 'flycheck
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

    ;;; folosesc ivy
  (use-package lsp-ivy
    :commands lsp-ivy-workspace-symbol)

  (use-package lsp-treemacs
    :commands lsp-treemacs-errors-list)


  (use-package dap-mode
    :config
    (dap-mode 1)
    (dap-auto-configure-mode 1))

  (use-package lsp-ui
    :custom (lsp-ui-doc-show-with-cursor t)
    :commands lsp-ui-mode)

  (use-package company
    :init
    (global-company-mode))

  (use-package yasnippet
    :config (yas-global-mode))

  (use-package which-key
    :config
    (which-key-mode))

  (use-package typescript-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.tsx\\'" . typescript-mode)))

    ;;; Setez culoarea pentru company
  (custom-set-faces
   '(company-tooltip
     ((t (:background "#e62525"))))
   '(company-tooltip-selection
     ((t (:background "#2f993f"))))
   '(lsp-ui-doc-background
     ((t (:background "#c551c9")))))

#+end_src



*** Jsx highlighting

#+begin_src emacs-lisp
  (use-package rjsx-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.ts[x]\\'" . rjsx-mode))
    (add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode)))
#+end_src


** Functii utile 

*** Anulez crearea de fisiere de rezerva
in special utila pentru react

creaza automat un fisier .dir-locals.el

  M-x + numele functiei

#+begin_src emacs-lisp
  (defun Local_Settings()
    (interactive)
    (with-temp-file ".dir-locals.el"
      (insert
       "(nil . ((setq make-backup-files nil)
	  (setq auto-save-list-file-name nil)
	  (setq auto-save-default nil)))" ))
    (message "Sa creat fisierul: .dir-locals.el") )
#+end_src


** Setari de finis

*** Comentarii
#+begin_src emacs-lisp

  ;;; init.el ends here
  
#+end_src




